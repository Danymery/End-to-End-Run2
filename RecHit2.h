#ifndef RecHit2_h
#define RecHit2_h

// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/one/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/InputTag.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

//class to extract Ecal RecHit information 
#include "DataFormats/EcalRecHit/interface/EcalRecHitCollections.h"
#include "DataFormats/EcalDigi/interface/EcalDigiCollections.h"

//class to extract Hcal RecHit information
#include "DataFormats/HcalRecHit/interface/HcalRecHitCollections.h"


//class to extract photon information
#include "DataFormats/PatCandidates/interface/Photon.h"
#include "DataFormats/EgammaCandidates/interface/PhotonFwd.h" //reco√ //reco√√ 



//classes to save data
#include "TTree.h"
#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TH3.h"
#include "TProfile2D.h"
#include<vector>
#include "TMath.h"
//
// class declaration
//

// If the analyzer does not use TFileService, please remove
// the template argument to the base class so the class inherits
// from  edm::one::EDAnalyzer<>
// This will improve performance in multithreaded jobs.



class RecHit2 : public edm::one::EDAnalyzer<edm::one::SharedResources>  {
   public:
      explicit RecHit2(const edm::ParameterSet&);
      ~RecHit2();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() override;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
      virtual void endJob() override;

      	edm::EDGetTokenT<reco::PhotonCollection> photonToken_;
	edm::EDGetTokenT<EcalRecHitCollection> EBRecHit_;	
        edm::EDGetTokenT<EcalRecHitCollection> EERecHit_;
	edm::EDGetTokenT<HBHERecHitCollection> HBHERecHitT_;
      // ----------member data ---------------------------
      
	TH1F *histogram;
        TTree *mtree;

      // Seleccion de los fotones
       void branchesEvtSel         ( TTree*, edm::Service<TFileService>& );
       bool runEvtSel          ( const edm::Event&, const edm::EventSetup& );
       
       // Informacion golpes enrgia en el barrill
       void branchesEB             ( TTree*, edm::Service<TFileService>& );
       void fillEB             ( const edm::Event&, const edm::EventSetup& );
       
	//Informacion golpes energia en las tapas 
	void branchesEE         ( TTree*, edm::Service<TFileService>& );
 	void fillEE             ( const edm::Event&, const edm::EventSetup& );

	//Informacion golpes energia hadrones
	void branchesHBHE           ( TTree*, edm::Service<TFileService>& );
	void fillHBHE           ( const edm::Event&, const edm::EventSetup& );

};

static const int nEE = 2;
static const int nTOB = 6;
static const int nTEC = 9;
static const int nTIB = 4;
static const int nTID = 3;
static const int nBPIX = 4;
static const int nFPIX = 3;

static const int EB_IPHI_MIN = 1;
static const int EB_IPHI_MAX = 360;
static const int EB_IETA_MIN = 1;
static const int EB_IETA_MAX = 85;
static const int EE_MIN_IX = 1;
static const int EE_MIN_IY = 1;
static const int EE_MAX_IX = 100;
static const int EE_MAX_IY = 100;
static const int EE_NC_PER_ZSIDE = 100*100;
static const int HBHE_IETA_MAX_FINE = 20;
static const int HBHE_IETA_MAX_HB = 16;
static const int HBHE_IETA_MIN_HB = 1;
static const int HBHE_IETA_MAX_HE = 29;
static const int HBHE_IETA_MAX_EB = 17;
static const int HBHE_IPHI_NUM = 72;
static const int HBHE_IPHI_MIN = 1;
static const int HBHE_IPHI_MAX = 72;
static const int ECAL_IETA_MAX_EXT = 140;

// EE-(phi,eta) projection eta edges
// These are generated by requiring 5 fictional crystals
// to uniformly span each HCAL tower in eta (as in EB).
static const double eta_bins_EEm[56] =
                    {-3.    , -2.93  , -2.86  , -2.79  , -2.72  , -2.65  , -2.62  ,
                   -2.59  , -2.56  , -2.53  , -2.5   , -2.4644, -2.4288, -2.3932,
                   -2.3576, -2.322 , -2.292 , -2.262 , -2.232 , -2.202 , -2.172 ,
                   -2.1462, -2.1204, -2.0946, -2.0688, -2.043 , -2.0204, -1.9978,
                   -1.9752, -1.9526, -1.93  , -1.91  , -1.89  , -1.87  , -1.85  ,
                   -1.83  , -1.812 , -1.794 , -1.776 , -1.758 , -1.74  , -1.7226,
                   -1.7052, -1.6878, -1.6704, -1.653 , -1.6356, -1.6182, -1.6008,
                   -1.5834, -1.566 , -1.5486, -1.5312, -1.5138, -1.4964, -1.479 };
// EE+(phi,eta) projection eta edges
static const double eta_bins_EEp[56] =
                   {1.479 ,  1.4964,  1.5138,  1.5312,  1.5486,  1.566 ,  1.5834,
                    1.6008,  1.6182,  1.6356,  1.653 ,  1.6704,  1.6878,  1.7052,
                    1.7226,  1.74  ,  1.758 ,  1.776 ,  1.794 ,  1.812 ,  1.83  ,
                    1.85  ,  1.87  ,  1.89  ,  1.91  ,  1.93  ,  1.9526,  1.9752,
                    1.9978,  2.0204,  2.043 ,  2.0688,  2.0946,  2.1204,  2.1462,
                    2.172 ,  2.202 ,  2.232 ,  2.262 ,  2.292 ,  2.322 ,  2.3576,
                    2.3932,  2.4288,  2.4644,  2.5   ,  2.53  ,  2.56  ,  2.59  ,
                    2.62  ,  2.65  ,  2.72  ,  2.79  ,  2.86  ,  2.93  ,  3.    };

// HBHE eta bin edges
static const double eta_bins_HBHE[57] =
                  {-3.000, -2.650, -2.500, -2.322, -2.172, -2.043, -1.930, -1.830, -1.740, -1.653, -1.566, -1.479, -1.392, -1.305,
                   -1.218, -1.131, -1.044, -0.957, -0.870, -0.783, -0.695, -0.609, -0.522, -0.435, -0.348, -0.261, -0.174, -0.087, 0.000,
                    0.087,  0.174,  0.261,  0.348,  0.435,  0.522,  0.609,  0.695,  0.783,  0.870,  0.957,  1.044,  1.131,  1.218,
                    1.305,  1.392,  1.479,  1.566,  1.653,  1.740,  1.830,  1.930,  2.043,  2.172,  2.322,  2.500,  2.650,  3.000};

#endif
